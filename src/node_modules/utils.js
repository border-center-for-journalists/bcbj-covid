import Papa from 'papaparse';

export async function serialize(dataSource) {
    const res = await fetch(dataSource);
    const csv = await res.text();
    const json = Papa.parse(csv.trim(), { header: true }).data;
    //console.log(json);
    return json;
}

export async function getMarkers() {
    L.LayerGroup.include({
        customGetLayer: function (id) {
            for (var i in this._layers) {
                if (this._layers[i].id == id) {
                    return this._layers[i];
                }
            }
        }
    });
    //TODO sort this data so that entities with fewer cases come last and are not overlapped by larger circles also filter out places with 0 cases
    const confirmed = await serialize('https://raw.githubusercontent.com/el-sonny/mxcovidserialize/master/data/output/csv/confirmed-time-series.csv');
    const deaths = await serialize('https://raw.githubusercontent.com/el-sonny/mxcovidserialize/master/data/output/csv/deaths-time-series.csv');
    const markers = confirmed.map(m => {
        const cases = m['29-04-20'];
        const radius = Math.ceil(cases * 40 / 800);
        const weight = cases > 0 ? 1 : 0;
        const fillOpacity = cases > 0 ? .2 : 0;
        let marker = L.circleMarker([m.popCenterLat, m.popCenterLon], {
            radius,
            weight,
            fillOpacity,
            color: '#fdf903',
            fillColor: '#fdf903'
        });
        marker.id = m.entityCode + m.municipalityCode;
        return marker;
    });
    const layer = L.layerGroup(markers);
    const hoverMarkers = confirmed.map(m => {
        const radius = Math.ceil(m['29-04-20'] * 40 / 800) + 10
        let marker = L.circleMarker([m.popCenterLat, m.popCenterLon], {
            radius,
            stroke : false,
            fillOpacity : 0,
        })
        .bindTooltip(m.municipalityName + ',' + m.entityName + ': ' + m['29-04-20'])
        .on('mouseover',e => layer.customGetLayer(e.sourceTarget.id).setStyle({color: '#000'}))
        .on('mouseout',e => layer.customGetLayer(e.sourceTarget.id).setStyle({color: '#fdf903'}));
        marker.id = m.entityCode + m.municipalityCode;
        return marker;
    });
    const hoverLayer = L.layerGroup(hoverMarkers);
    return [layer,hoverLayer];
}