import Papa from 'papaparse';

export async function serialize(dataSource) {
  const res = await fetch(dataSource);
  const csv = await res.text();
  const json = Papa.parse(csv.trim(), { header: true }).data;
  return json;
}

export async function loadData() {
  const baseURL = 'https://raw.githubusercontent.com/el-sonny/mxcovidserialize/master/data/output/csv/';
  const [confirmed, deaths] = await Promise.all([
    serialize(baseURL + 'confirmed-time-series.csv'),
    serialize(baseURL + 'deaths-time-series.csv')
  ]);
  return {
    confirmed: confirmed,
    deaths: deaths
  }
}
//Recieves the loaded data then combines deaths and confirmed cases into one object.
export function combineData(data) {
  const dates = Object.keys(data.confirmed[0]).slice(9);
  return data.confirmed.map((m, i) => {
    const confirmed = Object.values(m).slice(9);
    const deaths = Object.values(data.deaths[i]).slice(9);
    const confirmedPerCapita = confirmed.map(c => (c * 10000 / m.population).toFixed(1));
    const deathsPerCapita = deaths.map(d => (d * 10000 / m.population).toFixed(1));
    return {
      entityCode: m.entityCode,
      entityName: m.entityName,
      municipalityCode: m.municipalityCode,
      municipalityName: m.municipalityName,
      avgLat: m.avgLat,
      avgLon: m.avgLon,
      popCenterLat: m.popCenterLat,
      popCenterLon: m.popCenterLon,
      population: m.population,
      dates,
      confirmed,
      deaths,
      confirmedPerCapita,
      deathsPerCapita
    };

  });
}

export function makeMarkers(municipalities, dimension, dateIndex) {
  dateIndex = dateIndex !== undefined ? dateIndex : municipalities[0].dates.length - 1;
  const markers = municipalities.map(m => {
    const cases = m[dimension][dateIndex];
    const radius = Math.ceil(cases * 40 / 1000);
    const weight = cases > 0 ? 1 : 0;
    const fillOpacity = cases > 0 ? .3 : 0;
    let marker = L.circleMarker([m.popCenterLat, m.popCenterLon], {
      radius,
      weight,
      fillOpacity,
      color: '#fdf903',
      fillColor: '#fdf903'
    });
    //This id is used to relate with the hover layer and highlight the marker
    marker.id = m.entityCode + m.municipalityCode;
    return marker;
  });

  const getTitle = (m) => {
    const together = `${m.municipalityName}, ${m.entityName}`
    // console.log(together, together.length)
    if (together.length > 35)
      return `${m.municipalityName}, <br /> ${m.entityName}`
    else
      return together
  }

  const hoverMarkers = municipalities.map(m => {
    const cases = m[dimension][dateIndex];
    const radius = Math.ceil(cases * 40 / 1000) + 10;
    let marker = L.circleMarker([m.popCenterLat, m.popCenterLon], {
      radius,
      stroke: false,
      fillOpacity: 0,
      className: 'custom-tooltip'
    })
      .bindTooltip(`<div>
                <p>${getTitle(m)}</p>
                <div class='tooltip-row tooltip-header'>
                  <div></div>
                  <div><span>Total<span></div>
                  <div><span>Por 100,000<br/> personas<span></div>
                </div>
                <div class='tooltip-row'>
                  <div>Casos</div>
                  <div><strong>${new Intl.NumberFormat().format(m.confirmed[dateIndex])}</strong></div>
                  <div><strong>${m.confirmedPerCapita[dateIndex]}</strong></div>
                </div>
                <div class='tooltip-row'>
                  <div>Muertes</div>
                  <div><strong>${m.deaths[dateIndex]}</strong></div>
                  <div><strong>${m.deathsPerCapita[dateIndex]}</strong></div>
                </div>
            </div>`, {
        direction: 'top',
        sticky: true
      })
      .on('mouseover', e => visibleLayer.customGetLayer(e.sourceTarget.id).setStyle({ color: '#000' }))
      .on('mouseout', e => visibleLayer.customGetLayer(e.sourceTarget.id).setStyle({ color: '#fdf903' }));
    marker.id = m.entityCode + m.municipalityCode;
    return marker;
  });

  const visibleLayer = L.layerGroup(markers);
  const hoverLayer = L.layerGroup(hoverMarkers);
  return [visibleLayer, hoverLayer];
}
//This Extends Leaflet to allow markers to be fecthed from custom set ID's allowing us to relate the visible markers and the hover markers for circle-highlights.
export function setCustomGetLayer() {
  L.LayerGroup.include({
    customGetLayer: function (id) {
      for (var i in this._layers) {
        if (this._layers[i].id == id) {
          return this._layers[i];
        }
      }
    }
  });
}

export const getLastUpdateDate = (data) => {
  const { dates } = data[0]
  if (!dates) return ""
  const size = dates.length - 1
  return dates[size]
}