import Papa from 'papaparse';

export async function serialize(dataSource) {
    const res = await fetch(dataSource);
    const csv = await res.text();
    const json = Papa.parse(csv.trim(), { header: true }).data;
    //console.log(json);
    return json;
}

export async function getMarkers() {
    L.LayerGroup.include({
        customGetLayer: function(id) {
            for (var i in this._layers) {
                if (this._layers[i].id == id) {
                    return this._layers[i];
                }
            }
        }
    });
    //TODO sort this data so that entities with fewer cases come last and are not overlapped by larger circles also filter out places with 0 cases
    //TODO show last data
    const confirmed = await serialize('https://raw.githubusercontent.com/el-sonny/mxcovidserialize/master/data/output/csv/confirmed-time-series.csv');
    const deaths = await serialize('https://raw.githubusercontent.com/el-sonny/mxcovidserialize/master/data/output/csv/deaths-time-series.csv');
    const keys = Object.keys(confirmed[0]);
    const lastDate = keys[keys.length - 1];
    const markers = confirmed.map(m => {
        const cases = m[lastDate];
        const radius = Math.ceil(cases * 40 / 1000);
        const weight = cases > 0 ? 1 : 0;
        const fillOpacity = cases > 0 ? .3 : 0;
        let marker = L.circleMarker([m.popCenterLat, m.popCenterLon], {
            radius,
            weight,
            fillOpacity,
            color: '#fdf903',
            fillColor: '#fdf903'
        });
        marker.id = m.entityCode + m.municipalityCode;
        return marker;
    });
    const layer = L.layerGroup(markers);
    const hoverMarkers = confirmed.map(m => {
        const radius = Math.ceil(m[lastDate] * 40 / 1000) + 10
        let marker = L.circleMarker([m.popCenterLat, m.popCenterLon], {
                radius,
                stroke: false,
                fillOpacity: 0,
                className: 'custom-tooltip'
            })
            .bindTooltip(`<div>
                <p>${m.municipalityName}, <br/> ${m.entityName}</p>
                <div class='tooltip-row tooltip-header'>
                  <div></div>
                  <div><span>Total<span></div>
                  <div><span>Por 100,000<br/> personas<span></div>
                </div>
                <div class='tooltip-row'>
                  <div>Casos</div>
                  <div><strong>${m['29-04-20']}</strong></div>
                  <div><strong>5,555,555</strong></div>
                </div>
            </div>`, {
                direction: 'top',
                sticky: true
            })
            .on('mouseover', e => layer.customGetLayer(e.sourceTarget.id).setStyle({ color: '#000' }))
            .on('mouseout', e => layer.customGetLayer(e.sourceTarget.id).setStyle({ color: '#fdf903' }));
        marker.id = m.entityCode + m.municipalityCode;
        return marker;
    });
    const hoverLayer = L.layerGroup(hoverMarkers);
    return [layer, hoverLayer];
}